theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b2 <- draw_b(two_edge_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b3 <- draw_b(edge_indiff_events) +
ggtitle(expression(paste("Ranking one pair of edge events and one pair of indifferent events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b4 <- draw_b(edge_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b5 <- draw_b(two_indiff_events) +
ggtitle(expression(paste("Ranking two pairs of middle events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b6 <- draw_b(two_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b_all <- plot_grid(
b1, b2, b3, b4, b5, b6,
ncol=2,
nrow = 3
)
# extract a legend that is laid out horizontally
legend_b <- get_legend(
b1 +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "right")
)
# add the legend underneath the row we made earlier. Give it 10%
# of the height of one plot (via rel_heights).
plot_grid(b_all, legend_b, rel_widths = c(3, .4))
title <-  ggdraw() + draw_label(expression(paste("Conditional probabilities given that \n participants make errors in the rankings")))
p1 <- plot_grid(b_all, legend_b, rel_widths = c(3, .4))
plot_grid(title, p1, ncol=1, rel_heights=c(0.15, 1))
ggsave("b_all.jpg")
draw_b_two <- function (x){
df2 <- x %>%
mutate(con_prob_type1 = prob_type1 / (1-prob_correct-prob_type3),
con_prob_type2 = prob_type2 / (1-prob_correct-prob_type3),
con_all = con_prob_type1 + con_prob_type2 ) %>%
pivot_longer(con_prob_type1: con_prob_type2, names_to = "group",
values_to = "value")
b <- ggplot(df2, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=0.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Conditional probabilities"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Type 1", "Type 2"))
return(b)
}
b1 <- draw_b_two(two_edge_events) +
ggtitle(expression(paste("Ranking two pairs of edge events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b2 <- draw_b_two(two_edge_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b3 <- draw_b_two(edge_indiff_events) +
ggtitle(expression(paste("Ranking one pair of edge events and one pair of indifferent events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b4 <- draw_b_two(edge_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b5 <- draw_b_two(two_indiff_events) +
ggtitle(expression(paste("Ranking two pairs of middle events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b6 <- draw_b_two(two_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b_all <- plot_grid(
b1, b2, b3, b4, b5, b6,
ncol=2,
nrow = 3
)
# extract a legend that is laid out horizontally
legend_b <- get_legend(
b1 +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "right")
)
# add the legend underneath the row we made earlier. Give it 10%
# of the height of one plot (via rel_heights).
title <-  ggdraw() + draw_label(expression(paste("Conditional probabilities given that \n participants make errors in the rankings and do not give type 3 rankings")))
p1 <- plot_grid(b_all, legend_b, rel_widths = c(3, .4))
plot_grid(title, p1, ncol=1, rel_heights=c(0.15, 1))
ggsave("b_all2.jpg")
library(gridExtra)
library(grid)
library(ggplot2)
library(tidyverse)
files <- list("edge_events.csv", "edge_events_d_0.3.csv", "indiff_events.csv", "indiff_events_d_0.3.csv")
files_read <- map(files, read.csv)
dt <- data.frame( files_read[[1]]$X,
files_read[[1]]$conditional_prob_type1,
files_read[[2]]$conditional_prob_type1,
files_read[[3]]$conditional_prob_type1,
files_read[[4]]$conditional_prob_type1) %>%
set_names(c("sample_size", "edge events", "edge events, noise term d = 0.3", "indifferent events", "indifferent events, noise term d = 0.3")) %>%
pivot_longer(2:5, names_to = "condition", values_to = "value")
ggplot(dt, aes(sample_size,value, group = condition)) +
geom_line(aes(linetype = condition, col = condition), size = 1.25) +
scale_color_manual(values =  c("grey57", "grey57", "black", "black")) +
scale_linetype_manual(values = c(1, 2, 3, 4)) +
theme(legend.position = c(.20, .65)) +
theme(legend.position='right') +
ylab(expression(paste("Conditional probabilities \n of giving type 1 errors"))) +
xlab("Sample size N")  +
theme(plot.margin = margin(l = 20, t = 40, b=40)) +
theme(legend.key.width = unit(1.25,"cm")) +
scale_x_continuous(breaks = seq(0, 10, 1))
dt_wrong <- data.frame( files_read[[1]]$X,
1-files_read[[1]]$prob_right,
1-files_read[[2]]$prob_right,
1-files_read[[3]]$prob_right,
1-files_read[[4]]$prob_right) %>%
set_names(c("sample_size", "edge events", "edge events, noise term d = 0.3", "indifferent events", "indifferent events, noise term d = 0.3")) %>%
pivot_longer(2:5, names_to = "condition", values_to = "value")
ggplot(dt_wrong, aes(sample_size,value, group = condition)) +
geom_line(aes(linetype = condition, col = condition), size = 1.25) +
scale_color_manual(values =  c("grey57", "grey57", "black", "black")) +
scale_linetype_manual(values = c(1, 2, 3, 4)) +
theme(legend.position = c(.20, .65)) +
theme(legend.position='right') +
ylab(expression(paste("The average rate of making logical errors"))) +
xlab("Sample size N")  +
theme(plot.margin = margin(l = 20, t = 40, b=40)) +
theme(legend.key.width = unit(1.25,"cm")) +
scale_x_continuous(breaks = seq(0, 10, 1))
dt_type1 <- data.frame( files_read[[1]]$X,
files_read[[1]]$prob_type1,
files_read[[2]]$prob_type1,
files_read[[3]]$prob_type1,
files_read[[4]]$prob_type1) %>%
set_names(c("sample_size", "edge events", "edge events, noise term d = 0.3", "indifferent events", "indifferent events, noise term d = 0.3")) %>%
pivot_longer(2:5, names_to = "condition", values_to = "value")
ggplot(dt_type1, aes(sample_size,value, group = condition)) +
geom_line(aes(linetype = condition, col = condition), size = 1.25) +
scale_color_manual(values =  c("grey57", "grey57", "black", "black")) +
scale_linetype_manual(values = c(1, 2, 3, 4)) +
theme(legend.position = c(.20, .65)) +
theme(legend.position='right') +
ylab(expression(paste("The average rate of making type I errors"))) +
xlab("Sample size N")  +
theme(plot.margin = margin(l = 20, t = 40, b=40)) +
theme(legend.key.width = unit(1.25,"cm")) +
scale_x_continuous(breaks = seq(0, 10, 1))
edge_events <- files_read[[1]]  %>%
mutate(prob_wrong = 1-prob_right) %>%
select(prob_wrong, prob_type1, conditional_prob_type1)
( edge_events <- edge_events %>%
mutate(conditional_prob_type2 = 1-conditional_prob_type1)%>%
mutate(sample_size = 1:10))
edge_events_d_0.3 <- files_read[[2]] %>%
mutate(prob_wrong = 1 - prob_right) %>%
select(prob_wrong, prob_type1, conditional_prob_type1)
( edge_events_d_0.3 <- edge_events_d_0.3 %>%
mutate(conditional_prob_type2 = 1-conditional_prob_type1) %>%
mutate(sample_size = 1:10))
draw_untie<- function (x){
df2 <- x %>%
pivot_longer(conditional_prob_type1: conditional_prob_type2, names_to = "group",
values_to = "value")
b <- ggplot(df2, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=0.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Conditional probabilities"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Type 1", "Type 2"))
return(b)
}
p1 <- draw_untie(edge_events)
p2 <- draw_untie(edge_events_d_0.3)
p3 <- draw_untie(indifferent_events)
library(gridExtra)
library(grid)
library(ggplot2)
library(tidyverse)
library("rtdists")
library("cowplot")
library("ggpubr")
library("emmeans")
library("lattice")
library("afex")
plot_summary <- read.csv("simulation_with_ties_logically possible.csv")[, -1]
plot_ly(x = plot_summarise_two$sample_size) %>%
add_lines(y = plot_summarise_two$implausible_without_ties, line = list(color = 'black', dash = 'dot'),
name = "plausible/implausible events") %>%
add_lines(y = plot_summarise_two$implausible_without_ties_d_0.3, line = list(color = 'black', dash = 'dash'), name = "events near the ends of probability scales, d = 0.3") %>%
add_lines(y = plot_summarise_two$indifferent_without_ties, line = list(color = 'blue', dash = 'dashdot'), name = "indifferent events") %>%
add_lines(y = plot_summarise_two$indifferent_without_ties_d_0.3, line = list(color = 'blue'), name = "indifferent events, d = 0.3") %>%
layout( xaxis = x, yaxis = y)
library(gridExtra)
library(grid)
library(ggplot2)
library(tidyverse)
library(plotly)
plot_summary <- read.csv("simulation_with_ties_logically_possible.csv")[, -1]
summary_long <-plot_summary %>%
pivot_longer(2:5, names_to = "name", values_to = "value")
summary_long$name <- factor(summary_long$name, levels = c("two_implausible", "two_implausible_d_0.3",
"two_indifferent_events", "indifferent_events_d_0.3"))
p1 <- ggplot(data = summary_long,
aes(x=sample_size, y=value)) +
geom_line(aes(linetype = name, color = name), size = 2) +
ylab(expression(paste("The average rate of providing \n logically possible rankings"))) +
xlab("Sample size N") +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_linetype_manual(labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"), values = c(1, 2, 3, 4)) +
scale_colour_manual(name = "name",
labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"),
values = c("grey57", "grey57", "black", "black"))  +
theme_classic2() +
theme(plot.margin = margin(l = 20)) +
theme(axis.title.x = element_text(size=14),
axis.text.x =  element_text(size=12),
axis.text.y =  element_text(size=12),
axis.title.y = element_text(size=14))  +
theme(legend.text = element_text(size = 14)) +
theme(legend.title = element_blank()) +
theme(legend.position='none') +
theme(legend.key.width = unit(3,"cm"))
ggsave("p1.png", p1)
p1
plot_summarise_two <- read.csv("simulation_without_ties_logically_possible.csv")
summary_two_long <-plot_summarise_two %>%
pivot_longer(3:6, names_to = "name", values_to = "value") %>% as.data.frame()
summary_two_long <- summary_two_long  %>%
mutate(group = case_when(grepl("indifferent", name) ~ "Group2",
grepl("edge", name, ignore.case = TRUE) ~"Group1"))
p2 <- ggplot(data=summary_two_long,
aes(x = sample_size, y=value)) +
geom_line(aes(linetype = name, color = name), size = 2) +
ylab(expression(paste("The average rate of providing \n Type 1 illogical rankings"))) +
xlab("Sample size N") +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_linetype_manual(name = "name",
labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"),
values = c(1, 2, 3, 4)) +
scale_colour_manual(name = "name",
labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"),
values = c("grey57", "grey57", "black", "black")) +
theme_classic2() +
theme(plot.margin = margin(l = 40)) +
theme(axis.title.x = element_text(size=14),
axis.text.x =  element_text(size=12),
axis.text.y =  element_text(size=12),
axis.title.y = element_text(size=14))  +
theme(legend.text = element_text(size = 14)) +
theme(legend.title = element_blank()) +
theme(legend.position='none') +
theme(legend.key.width = unit(3,"cm"))
ggsave("p2.png", p2)
p2
p3 <- ggplot(data=summary_two_long,
aes(x = sample_size, y=value)) +
geom_line(aes(linetype = name, color = name), size = 2) +
ylab(expression(paste("The average rate of providing \n Type 1 illogical rankings"))) +
xlab("Sample size N") +
scale_x_continuous(breaks = seq(0, 20, 2)) +
scale_linetype_manual(name = "name",
labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"),
values = c(1, 2, 3, 4)) +
scale_colour_manual(name = "name",
labels = c("extreme events", "extreme events, d = 0.3", "indifferent events", "indifferent events, d = 0.3"),
values = c("grey57", "grey57", "black", "black")) +
theme_classic2() +
theme(plot.margin = margin(l = 20)) +
theme(axis.title.x = element_text(size=14),
axis.text.x =  element_text(size=10),
axis.text.y =  element_text(size=10),
axis.title.y = element_text(size=14))  +
theme(legend.text = element_text(size = 14)) +
theme(legend.title = element_blank()) +
theme(legend.position='right') +
theme(legend.key.width = unit(3,"cm"))
leg <- get_legend(p3)
as_ggplot(leg)
plot_summarise_two <- read.csv("simulation_without_ties_logically_possible.csv")
summary_two_long <-plot_summarise_two %>%
pivot_longer(3:6, names_to = "name", values_to = "value") %>% as.data.frame()
summary_two_long <- summary_two_long  %>%
mutate(group = case_when(grepl("indifferent", name) ~ "Group2",
grepl("edge", name, ignore.case = TRUE) ~"Group1"))
plot_summarise_two <- read.csv("simulation_without_ties_logically_possible.csv")
summary_two_long <-plot_summarise_two %>%
pivot_longer(3:6, names_to = "name", values_to = "value") %>% as.data.frame()
View(summary_two_long)
summary_two_long <- summary_two_long  %>%
mutate(group = case_when(grepl("indifferent", name) ~ "Group2",
grepl("edge", name, ignore.case = TRUE) ~"Group1"))
View(summary_two_long)
summary_two_long <- summary_two_long  %>%
mutate(group = case_when(grepl("indifferent", name) ~ "Group2",
grepl("edge", name, ignore.case = TRUE) ~"Group1"))
View(summary_two_long)
summary_two_long <- summary_two_long  %>%
mutate(group = case_when(grepl("indifferent", name) ~ "Group2",
grepl("plau", name, ignore.case = TRUE) ~"Group1"))
View(summary_two_long)
draw_b <- function (x){
df2 <- x %>%
mutate(con_prob_type1 = prob_type1 / (1-prob_correct),
con_prob_type2 = prob_type2 / (1-prob_correct),
con_prob_type3 = prob_type3 / (1-prob_correct),
con_all = con_prob_type1 + con_prob_type2 + con_prob_type3) %>%
pivot_longer(con_prob_type1: con_prob_type3, names_to = "group",
values_to = "value")
b <- ggplot(df2, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=0.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Conditional probabilities"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Type 1", "Type 2", "Type 3"))
return(b)
}
knitr::opts_chunk$set(warning = FALSE, echo = FALSE)
library(tidyverse)
library(viridis)
library(ggpubr)
library(cowplot)
library(ggplot2)
library(rlang)
two_edge_events <- read.csv("two_edge_events.csv")
two_edge_events_with_d <- read.csv("two_edge_events_with_d.csv")
edge_indiff_events <- read.csv("edge_indiff_events.csv")
edge_indiff_events_with_d <- read.csv("edge_indiff_events_with_d.csv")
two_indiff_events <- read.csv("two_indiff_events.csv")
two_indiff_events_with_d <- read.csv("two_indiff_events_with_d.csv")
draw_a <- function (x){
df1 <- x %>%
pivot_longer(prob_type1: prob_correct, names_to = "group",
values_to = "value")
a <- ggplot(df1, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Average rates of giving \n each type of rankings"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Logically correct", "Type 1", "Type 2", "Type 3"))
return(a)
}
a1 <- draw_a(two_edge_events) +
ggtitle(expression(paste("Ranking two pairs of edge events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a2 <- draw_a(two_edge_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a3 <- draw_a(edge_indiff_events) +
ggtitle(expression(paste("Ranking one pair of edge events and one pair of indifferent events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a4 <- draw_a(edge_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a5 <- draw_a(two_indiff_events) +
ggtitle(expression(paste("Ranking two pairs of middle events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a6 <- draw_a(two_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
a_all <- plot_grid(
a1, a2, a3, a4, a5, a6,
ncol=2,
nrow = 3
)
# extract a legend that is laid out horizontally
legend_a <- get_legend(
a1 +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "right")
)
# add the legend underneath the row we made earlier. Give it 10%
# of the height of one plot (via rel_heights).
plot_grid(a_all, legend_a, rel_widths = c(3, .4))
ggsave("a_all.jpg")
prob_correct <- data.frame(sample_size = 1:20, two_edge_events = two_edge_events$prob_correct, two_edge_events_with_d = two_edge_events_with_d$prob_correct,
edge_indiff_events = edge_indiff_events$prob_correct, edge_indiff_events_with_d = edge_indiff_events_with_d$prob_correct,
two_indiff_events = two_indiff_events$prob_correct,  two_indiff_events_with_d = two_indiff_events_with_d$prob_correct) %>%
set_names(c("sample_size", "edge events only, noise term d = 0",
"edge events only, noise term d = 0.3",
"edge events + middle events, noise term d = 0",
"edge events + middle events, noise term d = 0.3",
"middle events only, noise term d = 0",
"middle events only, noise term d = 0.3"))
prob_correct  <- prob_correct %>%
pivot_longer(2:7, names_to = "condition", values_to = "value") %>%
mutate(value = 1 - value)
ggplot(prob_correct, aes(sample_size, value, group = condition)) +
geom_line(aes(linetype = condition, col = condition), size = 1.25) +
scale_color_manual(values =  c("grey57", "grey57", "black", "black", "blue", "blue")) +
scale_linetype_manual(values = c(1, 2, 3, 4, 5, 6)) +
theme(legend.position = c(.20, .65)) +
theme(legend.position='bottom') +
ylab(expression(paste("The average rate of giving \n logically incorrect responses"))) +
xlab("Sample size N")  +
theme(plot.margin = margin(l = 80, t = 40, b=0, r = 100)) +
theme(legend.key.width = unit(1.5,"cm")) +
scale_x_continuous(breaks = seq(0, 20, 1)) +
guides(color = guide_legend(nrow = 3)) +
theme(legend.title=element_text(size=8),
legend.text=element_text(size=8))
ggsave("error_rates.jpg")
draw_b <- function (x){
df2 <- x %>%
mutate(con_prob_type1 = prob_type1 / (1-prob_correct),
con_prob_type2 = prob_type2 / (1-prob_correct),
con_prob_type3 = prob_type3 / (1-prob_correct),
con_all = con_prob_type1 + con_prob_type2 + con_prob_type3) %>%
pivot_longer(con_prob_type1: con_prob_type3, names_to = "group",
values_to = "value")
b <- ggplot(df2, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=0.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Conditional probabilities"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Type 1", "Type 2", "Type 3"))
return(b)
}
draw_b_two <- function (x){
df2 <- x %>%
mutate(con_prob_type1 = prob_type1 / (1-prob_correct-prob_type3),
con_prob_type2 = prob_type2 / (1-prob_correct-prob_type3),
con_all = con_prob_type1 + con_prob_type2 ) %>%
pivot_longer(con_prob_type1: con_prob_type2, names_to = "group",
values_to = "value")
b <- ggplot(df2, aes(x=sample_size, y=value, fill=group)) +
geom_area(alpha=0.6 , size=0.5, colour="black") +
scale_fill_viridis(discrete = T) +
xlab("sample size") +
ylab(expression(paste("Conditional probabilities"))) +
scale_fill_discrete(name = "Type of rankings", labels=c("Type 1", "Type 2"))
return(b)
}
b1 <- draw_b_two(two_edge_events) +
ggtitle(expression(paste("Ranking two pairs of edge events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b2 <- draw_b_two(two_edge_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b3 <- draw_b_two(edge_indiff_events) +
ggtitle(expression(paste("Ranking one pair of edge events and one pair of indifferent events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b4 <- draw_b_two(edge_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b5 <- draw_b_two(two_indiff_events) +
ggtitle(expression(paste("Ranking two pairs of middle events, \n d = 0"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b6 <- draw_b_two(two_indiff_events_with_d) +
ggtitle(expression(paste(" \n d = 0.3"))) +
theme_half_open(6) +
theme(plot.margin = margin(10, 0, 0, 80)) +
theme(legend.position="none")
b_all <- plot_grid(
b1, b2, b3, b4, b5, b6,
ncol=2,
nrow = 3
)
# extract a legend that is laid out horizontally
legend_b <- get_legend(
b1 +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "right")
)
# add the legend underneath the row we made earlier. Give it 10%
# of the height of one plot (via rel_heights).
title <-  ggdraw() + draw_label(expression(paste("Conditional probabilities given that \n participants make errors in the rankings and do not give type 3 rankings")))
p1 <- plot_grid(b_all, legend_b, rel_widths = c(3, .4))
plot_grid(title, p1, ncol=1, rel_heights=c(0.15, 1))
ggsave("b_all2.jpg")
