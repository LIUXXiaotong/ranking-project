beta = 1
irc1 <- 1 / (1 + exp(-alpha*(gamma-beta)))
plot(gamma, irc1, type = "l")
plot(gamma, irc1, type = "l")
alpha = 1.25
beta = 1
irc2 <- 1 / (1 + exp(-alpha*(gamma-beta)))
lines(gamma, irc2)
alpha = 1.5
beta = 1
irc3 <- 1 / (1 + exp(-alpha*(gamma-beta)))
lines(gamma, irc3, type = "l")
alpha = 1.75
beta = 1
irc4 <- 1 / (1 + exp(-alpha*(gamma-beta)))
lines(gamma, irc4)
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
plot(ylim = c(0, 1), xlim = c(-4, 4))
plot(ylim = c(0, 1), xlim = c(-4, 4))
plot(ylim = c(0, 1), xlim = c(-4, 4))
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
plot(ylim = c(0, 1), xlim = c(-4, 4))
plot(ylim = c(0, 1), xlim = c(-4, 4))
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
seq(1, 2, 0.25)
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta = 1
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta = 1
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta = 1
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta = 1
alpha <- seq(1, 2, 0.25)
irc <-  1 / (1 + exp(-alpha*(gamma-beta)))
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
irc <- c()
irc[i] <-  1 / (1 + exp(-alpha[i]*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc[i] <-  1 / (1 + exp(-alpha[i]*(gamma-beta)))
gamma <- seq(-4, 4, 0.01)
beta = 1
irc <- NULL
alpha <- seq(1, 2, 0.25)
irc[i] <-  1 / (1 + exp(-alpha[i]*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
alpha[1]
alpha <- seq(1, 2, 0.25)
seq(1, 2, 0.25)
irc[1] <-  1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc[I] <-  0
irc[I] <-  0
irc[1] <-  0
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
gamma <- seq(-4, 4, 0.01)
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- NULL
alpha <- seq(1, 2, 0.25)[i]
irc <- 1 / (1 + exp(-alpha*(gamma-beta)))
irc[i] <- 1 / (1 + exp(-alpha*(gamma-beta)))
irc <- c(0, 5)
irc[i] <- 1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)[i]
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- c(0, 5)
for(i in 1:5){
alpha <- seq(1, 2, 0.25)[i]
irc[i] <- 1 / (1 + exp(-alpha*(gamma-beta)))
lines(gamma, irc[[i]], type = "l") #thickness set to be higher
}
alpha <- seq(1, 2, 0.25)[1]
irc[1] <- 1 / (1 + exp(-alpha*(gamma-beta)))
irc <- c(0, 5)
alpha <- seq(1, 2, 0.25)[1]
irc[1] <- 1 / (1 + exp(-alpha*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
alpha <- seq(1, 2, 0.25)
alpha <- seq(1, 2, 0.25)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- c(0, 5)
alpha <- seq(1, 2, 0.25)
irc <- c(0, 5)
gamma <- seq(-4, 4, 0.01)
beta <- 1
alpha <- seq(1, 2, 0.25)
irc[1] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc <- c(0, 5)
c(0, 5)
irc <- NULL
alpha <- seq(1, 2, 0.25)
irc[1] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc <- rep(0, 5)
rep(0, 5)
alpha <- seq(1, 2, 0.25)
irc[1] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
alpha <- seq(1, 2, 0.25)
irc[1] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
-alpha[1]
alpha[1]
irc[1]
irc <- rep(0, 5)
irc[[1]] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc[[1]]
irc[[1]] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc <- NULL
irc[[1]] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc[[1]] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
irc[[1]] <- 1 / (1 + exp(-alpha[1]*(gamma-beta)))
lines(gamma, irc[[1]], type = "l") #thickness set to be higher
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- NULL
for(i in 1:5){
alpha <- seq(1, 2, 0.25)
irc[[i]] <- 1 / (1 + exp(-alpha[i]*(gamma-beta)))
lines(gamma, irc[[1]], type = "l") #thickness set to be higher
}
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- NULL
for(i in 1:5){
alpha <- seq(1, 2, 0.25)
irc[[i]] <- 1 / (1 + exp(-alpha[i]*(gamma-beta)))
lines(gamma, irc[[1]], type = "l") #thickness set to be higher
}
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- NULL
for(i in 1:5){
alpha <- seq(1, 2, 0.25)
irc[[i]] <- 1 / (1 + exp(-alpha[i]*(gamma-beta)))
lines(gamma, irc[[i]], type = "l") #thickness set to be higher
}
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
gamma <- seq(-4, 4, 0.01)
beta <- 1
irc <- NULL
for(i in 1:5){
alpha <- seq(1, 2, 0.25)
irc[[i]] <- 1 / (1 + exp(-alpha[i]*(gamma-beta)))
lines(gamma, irc[[i]], type = "l") #thickness set to be higher
}
plot(NA, ylim = c(0, 1), xlim = c(-4, 4)) + xlab("gamma")
plot(NA, ylim = c(0, 1), xlim = c(-4, 4)) + xlab("gamma")
plot(NA, ylim = c(0, 1), xlim = c(-4, 4)) + xtitle("gamma")
par(mfrow = c(1, 1))
plot(index, irc, ylim = c(0, 1), xlim = c(-4, 4))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))  + xlab("x")
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))  + xlab("x")
axis(lables = "gamma")
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(lables = "gamma")
axis(1, lables = "gamma")
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, lables = "gamma")
axis(1, labels = "gamma")
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, labels = "gamma")
axis(1, at=-4:4, labels=month.name, cex.axis=0.5)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, at=-4:4, labels=month.name, cex.axis=0.5)
axis(1, abels=month.name, cex.axis=0.5)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, abels=month.name, cex.axis=0.5)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, labels=month.name, cex.axis=0.5)
par(mfrow = c(1, 1))
plot(NA, ylim = c(0, 1), xlim = c(-4, 4))
axis(1, labels= "gamma", cex.axis=0.5)
gamma <- seq(-4, 4, 0.01)
alpha = 1
beta = 1
irc1 <- 1 / (1 + exp(-alpha*(gamma-beta)))
plot(gamma, irc1, type = "l")
for(i in 1:5){
alpha <- seq(1, 2, 0.25)
irc[[i]] <- 1 / (1 + exp(-alpha[i]*(gamma-beta)))
lines(gamma, irc[[i]], type = "l") #thickness set to be higher
}
link1 = "https://raw.githubusercontent.com/rouderj/"
link2 = "robust21/main/ld5clean.R"
link=paste(link1,link2,sep="")
source(url(link))
dat=ld5MakeClean()
str(dat)
head(dat)
head(dat)
View(dat)
View(dat)
dat %>% group_by(sub) %>%
summarise(mean_rt = mean(rt))
dat_rt <- dat %>% group_by(digit) %>%
summarise(mean_rt = mean(rt))
View(dat_rt)
View(dat_rt)
hit(dat_rt$mean_rt)
hit(digit, dat_rt$mean_rt)
hist(dat_rt$mean_rt)
plot(dat_rt$digit, dat_rt$mean_rt)
dat_rt <- dat %>%
mutate(abs_dig = abs(digit-5)) %>%
group_by(digit) %>%
summarise(mean_rt = mean(rt))
View(dat_rt)
dat_rt <- dat %>%
mutate(abs_dig = abs(digit-5)) %>%
group_by(abs_dig) %>%
summarise(mean_rt = mean(rt))
hist(dat_rt$mean_rt)
plot(dat_rt$abs_dig, dat_rt$mean_rt)
View(dat_rt)
dat_rt <- dat %>%
mutate(abs_dig = abs(digit-5)) %>%
group_by(digit) %>%
summarise(mean_rt = mean(rt))
hist(dat_rt$mean_rt)
plot(dat_rt$digit, dat_rt$mean_rt)
plot(dat_rt$digit, dat_rt$mean_rt)
plot(dat_rt$digit, dat_rt$mean_rt, type = "l")
points(dat_rt$digit, dat_rt$mean_rt)
head(dat)
dat_rt <- dat %>%
mutate(abs_dig = abs(digit-5)) %>%
group_by(digit) %>%
summarise(mean_rt = mean(rt))
plot(dat_rt$digit, dat_rt$mean_rt, type = "l")
points(dat_rt$digit, dat_rt$mean_rt)
###################
dat_12 <- data %>%
filter(sub == 0)
###################
dat_12 <- data %>%
filter(sub = 0)
###################
dat_12 <- data %>%
filter(sub == 0)
View(ld5MakeClean)
###################
dat_12 <- data %>%
filter(sub = 0)
###################
dat_12 <- dat %>%
filter(sub = 0)
###################
dat_12 <- dat %>%
filter(sub == 0)
###################
dat_12 <- dat %>%
filter(sub == 0 && digit == 2)
logLike <- function(par,y) {
-sum(dlnorm(y-par[1],par[2],par[3],log=T))
}
logLike <- function(par,y) {
-sum(dlnorm(y-par[1],par[2],par[3],log=T))
}
optim(c(0.2, log(0.1), 0.3), loglike, dat_12)
optim(c(0.2, log(0.1), 0.3), logLike, dat_12)
optim(c(0.2, log(0.1), 0.3), logLike, y=dat_12$rt)
optim(c(0.4, log(0.4), 0.5), logLike, y=dat_12$rt)
y <- optim(c(0.2, log(0.1), 0.3), logLike, y=dat_12$rt)
optim(c(0.2, log(0.1), 0.3), logLike, y=dat_12$rt)
x <- c(0.2, log(0.1), 0.3)
optim(x, logLike, y=dat_12$rt)
par <- c(0.2, log(0.1), 0.3)
optim(par, logLike, y=dat_12$rt)
par <- c(0.2, log(0.1), 0.3)
logLike <- function(par,y) {
-sum(dlnorm(y-par[1],par[2],par[3],log=T))
}
optim(par, logLike, y=dat_12$rt)
View(dat_12)
###################
dat_12 <- dat %>%
filter(sub == 0 && digit == 2)
###################
dat_12 <- dat %>%
filter(sub == 0)
###################
dat_12 <- dat %>%
filter(sub == 0 & digit == 2)
###################
dat_12 <- dat %>%
filter(sub == 0 & digit == 2)
logLike <- function(par,y) {
-sum(dlnorm(y-par[1],par[2],par[3],log=T))
}
par <- c(0.2, log(0.1), 0.3)
optim(par, logLike, y=dat_12$rt)
View(dat)
str(dat)
dat$digit <- as.factor(dat$digit)
unique(dat$digit)
dat$sub <- as.factor(dat$sub)
unique(dat$sub)
unique(dat$digit)
59*6
length(unique(dat$digit))
length(unique(dat$sub))
52*6
for i in 1:312{
}
length(unique(dat$digit))*length(unique(dat$sub))
dat %>% group(sub, digit)
dat %>% group_by(sub, digit)
y_person <- dat %>% filter(sub == length(unique(dat$sub))[i]
for i in 1: length(unique(dat$sub)){
y_person <- dat %>% filter(sub == unique(dat$sub)[i])
for j in (1: length(unique(dat$digit)) {
y_person_item <- y_person %>% filter(digit == unique(dat$digit)[[j]])
output[[j]] <- optim(par, logLike,  y_person_item)
}
}
}
}
for i in 1: length(unique(dat$sub)){
y_person <- dat %>% filter(sub == unique(dat$sub)[i])
for j in (1: length(unique(dat$digit)) {
y_person_item <- y_person %>% filter(digit == unique(dat$digit)[[j]])
output[[j]] <- optim(par, logLike,  y_person_item)
}
}
}
}
for (i in 1: length(unique(dat$sub))){
y_person <- dat %>% filter(sub == unique(dat$sub)[i])
}
for (i in 1: length(unique(dat$sub))){
for (j in 1: length(unique(dat$digit)){
y_person <- dat %>% filter(sub == unique(dat$sub)[i])
y_person_item <- y_person %>% filter(digit == unique(dat$digit)[j])
}
}
length(unique(dat$digit))*length(unique(dat$sub))
for (i in 1: length(unique(dat$sub))){
for (j in 1: length(unique(dat$digit)){
y_person <- dat %>% filter(sub == unique(dat$sub)[i])
y_person_item <- y_person %>% filter(digit == unique(dat$digit)[j])
}
}
setwd("~/Documents/Git_projects/ranking-project/Data and analysis scripts/study_1")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(afex)
library(emmeans)
library(TreeBUGS)
allow_indi <- read.csv("allow_indi.csv")
View(allow_indi)
allow_indi <- read.csv("allow_indi.csv")
count_f <- allow_indi %>%
summarise(e1 = sum(mid_logical),
e2 = sum(mid_type1),
e3 = sum(mid_type2),
e4 = sum(mid_type3),
f1 = sum(edge_logical),
f2 = sum(edge_type1),
f3 = sum(edge_type2),
f4 = sum(edge_type3))
count_f
250+123+149+24
177*12
177*6
250+123+149+24
count_f <- allow_indi %>%
summarise(e1 = sum(mid_logical),
e2 = sum(mid_type1),
e3 = sum(mid_type2),
e4 = sum(mid_type3),
f1 = sum(edge_logical),
f2 = sum(edge_type1),
f3 = sum(edge_type2),
f4 = sum(edge_type3))
count_f
380+5+157+4
250+123+149+24
380+5+157+4
177*6
380+5+157+4
546/6
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(afex)
library(emmeans)
df <- read.csv("study_1_df.csv")
df_demo <- read.csv("df_data_demo2.csv")
df_demo_before <- read.csv("df_data_demo.csv")
unique(df_demo$comments)
unique(df_demo_before$comments)
mean(df_demo$age %>% as.numeric())
sd(df_demo$age %>% as.numeric())
range(df_demo$age)
#ggplot(data_demo, aes(x=age)) + geom_bar()
df %>% group_by(between_subject_condition) %>% count()
1092/12
1032/12
head(df)
str(df)
mean(df$if_there_are_errors)
df %>%
filter(within_subject_condition == "indiff") %>%
summarise(mean_error = mean(if_there_are_errors))
df %>%
filter(within_subject_condition == "extreme") %>%
summarise(mean_error = mean(if_there_are_errors))
df_ties_allowed <- df %>% filter(between_subject_condition == "ties_allowed")
## function to calculate conditional prob conditional on already being wrong
con_prob_error_type <- function(df){
no_of_rankings_with_a_logical_error <- df %>%
select(ID, error_type) %>%
drop_na() %>%
nrow()
no_of_type1 <- df %>%
select(ID, error_type) %>%
drop_na() %>%
filter(error_type == "1") %>%
nrow()
no_of_type2 <- df %>%
select(ID, error_type) %>%
drop_na() %>%
filter(error_type == "0") %>%
nrow()
no_of_type3 <- df %>%
select(ID, error_type) %>%
drop_na() %>%
filter(error_type == "2") %>%
nrow()
con_prob_type1 <- no_of_type1/no_of_rankings_with_a_logical_error
con_prob_type2 <- no_of_type2/no_of_rankings_with_a_logical_error
con_prob_type3 <- no_of_type3/no_of_rankings_with_a_logical_error
return(c(con_prob_type1,  con_prob_type2,  con_prob_type3))
}
## apply the above two functions
con_prob_error_type(df_ties_allowed %>%
filter(within_subject_condition == "indiff") )
con_prob_error_type( df_ties_allowed %>%
filter(within_subject_condition == "extreme") )
df_ties_not_allowed <- df %>% filter(between_subject_condition == "ties_not_allowed")
con_prob_error_type(df_ties_not_allowed %>%
filter(within_subject_condition == "indiff") )
con_prob_error_type(df_ties_not_allowed %>%
filter(within_subject_condition == "extreme") )
##  calculate the prob. of providing ties.
mean(df_ties_allowed$if_there_are_ties)
##  another way to calculate con prob for the condition where ties are allowed
df_ties_allowed %>%
filter( within_subject_condition == "indiff" ) %>%
select(ID, error_type) %>%
drop_na() %>%
filter(error_type != 2) %>%
summarise(con_type1 = mean(error_type),
con_type2 = 1-con_type1)
df_ties_allowed %>%
filter( within_subject_condition == "extreme" ) %>%
select(ID, error_type) %>%
drop_na() %>%
filter(error_type != 2) %>%
summarise(con_type1 = mean(error_type),
con_type2 = 1-con_type1)
