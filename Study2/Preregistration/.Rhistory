, 0.4586825
, 0.4650092
, 0.4710952
, 0.4769566
, 0.4826078
, 0.4880619
, 0.4933307
, 0.5172474
, 0.5378402
, 0.5558406
, 0.5717668
, 0.5859989
, 0.5988239)
mean_type1 <- c(0.31751586
, 0.30276430
, 0.28837276
, 0.27528117
, 0.26331631
, 0.25235354
, 0.24227458
, 0.23297698
, 0.22437284
, 0.21638677
, 0.20895389
, 0.20201814
, 0.19553081
, 0.18944942
, 0.18373672
, 0.17835992
, 0.17329005
, 0.16850138
, 0.16397102
, 0.15967850
, 0.14120156
, 0.12655984
, 0.11466886
, 0.10481872
, 0.09652492
, 0.08944534)
mean_type2 <- c(0.3412421
, 0.3427119
, 0.3455410
, 0.3477780
, 0.3495450
, 0.3508839
, 0.3518527
, 0.3525039
, 0.3528830
, 0.3530287
, 0.3529740
, 0.3527470
, 0.3523715
, 0.3518680
, 0.3512541
, 0.3505449
, 0.3497533
, 0.3488908
, 0.3479671
, 0.3469908
, 0.3415510
, 0.3356000
, 0.3294905
, 0.3234145
, 0.3174762
, 0.3117307)
linear_middle_events <- cbind(mean_correct, mean_type1, mean_type2) %>%
as.data.frame() %>%
mutate(event_types = "middle event sets",
sample_size = c(1:20, 25, 30, 35, 40, 45, 50),
noise_term = 0,
check = mean_correct + mean_type1 + mean_type2)
write.csv(linear_middle_events, "linear_middle_events.csv", row.names = FALSE)
mean_correct <- c(0.3956590
, 0.5126093
, 0.6172121
, 0.6943212
, 0.7503116
, 0.7916253
, 0.8227969
, 0.8468444
, 0.8657779
, 0.8809588
, 0.8933286
, 0.9035525
, 0.9121103
, 0.9193546
, 0.9255489
, 0.9308935
, 0.9355428
, 0.9396171
, 0.9432116
, 0.9464023
, 0.9580929
, 0.9654496
, 0.9704618
, 0.9740794
, 0.9768070
, 0.9789346	)
mean_type1 <- c(0.208681981
, 0.115399615
, 0.073087848
, 0.050269145
, 0.036637920
, 0.027887539
, 0.021956453
, 0.017760486
, 0.014687334
, 0.012371069
, 0.010582651
, 0.009173086
, 0.008042222
, 0.007120813
, 0.006359796
, 0.005723648
, 0.005186154
, 0.004727637
, 0.004333100
, 0.003990951
, 0.002806012
, 0.002120755
, 0.001684053
, 0.001385796
, 0.001171304
, 0.001010793)
mean_type2 <- c(0.39565901
, 0.37199111
, 0.30970007
, 0.25540966
, 0.21305044
, 0.18048717
, 0.15524668
, 0.13539514
, 0.11953474
, 0.10667009
, 0.09608873
, 0.08727439
, 0.07984746
, 0.07352461
, 0.06809130
, 0.06338281
, 0.05927105
, 0.05565527
, 0.05245532
, 0.04960679
, 0.03910109
, 0.03242969
, 0.02785417
, 0.02453477
, 0.02202174
, 0.02005459)
linear_mixed_events <- cbind(mean_correct, mean_type1, mean_type2) %>%
as.data.frame() %>%
mutate(event_types = "mixed event sets",
sample_size = c(1:20, 25, 30, 35, 40, 45, 50),
noise_term = 0,
check = mean_correct + mean_type1 + mean_type2)
write.csv(linear_mixed_events, "linear_mixed_events.csv", row.names = FALSE)
mean_correct <- c(0.3433054
, 0.3609169
, 0.3770016
, 0.3927281
, 0.4080606
, 0.4230086
, 0.4375726
, 0.4517524
, 0.4655486
, 0.4789634
, 0.4920003
, 0.5046639
, 0.5169599
, 0.5288948
, 0.5404757
, 0.5517103
, 0.5626067
, 0.5731734
, 0.5834190
, 0.5933522
, 0.6386425
, 0.6774262
, 0.7106971
, 0.7393230
, 0.7640413
, 0.7854704	)
mean_type1 <- c(0.31338912
, 0.29424795
, 0.27520647
, 0.25757760
, 0.24125677
, 0.22615973
, 0.21219118
, 0.19925872
, 0.18727643
, 0.17616538
, 0.16585349
, 0.15627510
, 0.14737042
, 0.13908505
, 0.13136944
, 0.12417848
, 0.11747103
, 0.11120957
, 0.10535983
, 0.09989051
, 0.07732843
, 0.06086199
, 0.04864351
, 0.03943792
, 0.03240388
, 0.02695820)
mean_type2 <- c(0.3433054
, 0.3448352
, 0.3477919
, 0.3496943
, 0.3506827
, 0.3508317
, 0.3502362
, 0.3489889
, 0.3471750
, 0.3448712
, 0.3421462
, 0.3390610
, 0.3356697
, 0.3320202
, 0.3281549
, 0.3241113
, 0.3199223
, 0.3156170
, 0.3112212
, 0.3067572
, 0.2840291
, 0.2617118
, 0.2406593
, 0.2212391
, 0.2035548
, 0.1875714)
linear_mixed_events_with_d <- cbind(mean_correct, mean_type1, mean_type2) %>%
as.data.frame() %>%
mutate(event_types = "mixed event sets",
sample_size = c(1:20, 25, 30, 35, 40, 45, 50),
noise_term = 0.3,
check = mean_correct + mean_type1 + mean_type2)
write.csv(linear_mixed_events_with_d, "linear_mixed_events_with_d.csv", row.names = FALSE)
#define my function to draw plots
#install.packages("viridis")
library(tidyverse)
library(viridis)
library(ggplot2)
library(gridExtra)
theme_set(theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()))
options(
ggplot2.continuous.colour = "viridis",
ggplot2.continuous.fill = "viridis"
)
scale_colour_discrete = scale_colour_viridis_d
scale_fill_discrete = scale_fill_viridis_d
edge_events <- read.csv("linear_edge_0.csv")
edge_events_with_d <- read.csv("linear_edge_03.csv")
middle_events <- read.csv("linear_middle_0.csv")
middle_events_with_d <- read.csv("linear_middle_03.csv")
mixed_events <- read.csv("linear_mixed_0.csv")
mixed_events_with_d <- read.csv("linear_mixed_03.csv")
df <- rbind(edge_events, edge_events_with_d, middle_events, middle_events_with_d,  mixed_events,  mixed_events_with_d)
df$noise_term <- as.factor(df$noise_term)
df <- df %>%
mutate(con_type3 = mean_type3 / (1 - mean_correct))
df <- df %>%
mutate(con_type1 = mean_type1 / (1- mean_type3 - mean_correct))
linear_edge_events <- read.csv("linear_edge_events.csv")
linear_edge_events_with_d <- read.csv("linear_edge_events_with_d.csv")
linear_middle_events <- read.csv("linear_middle_events.csv")
linear_middle_events_with_d <- read.csv("linear_middle_events_with_d.csv")
linear_mixed_events <- read.csv("linear_mixed_events.csv")
linear_mixed_events_with_d <- read.csv("linear_mixed_events_with_d.csv")
df2 <- rbind(linear_edge_events, linear_edge_events_with_d, linear_middle_events, linear_middle_events_with_d, linear_mixed_events,  linear_mixed_events_with_d)
df2$noise_term <- as.factor(df2$noise_term)
df2 <- df2 %>%
mutate(con_type1 = mean_type1 / (1- mean_correct))
# p1 <- ggplot(df, aes(sample_size, mean_correct)) +
#   geom_line(aes(color = event_types, linetype = noise_term), size=1) +
#   scale_x_continuous(breaks = seq(0, 50, 5)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.25)) +
#   labs(color = "Event set type") +
#   labs(linetype="Error in sampling") +
#   xlab("Sample size") +
#   ylab(expression(paste("Pr(logically possible rankings)")))  +
#    scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) +
#   theme(legend.position="none") +
#   theme(axis.text=element_text(size=8),
#         axis.title=element_text(size=8),
#         axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#         axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)))
#
# p1
# p2 <- ggplot(df, aes(sample_size, con_type3)) +
#   geom_line(aes(color = event_types, linetype = noise_term), size=1) +
#   scale_x_continuous(breaks = seq(0, 50, 5)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.25)) +
#   labs(color = "Event set type") +
#   labs(linetype="Error in sampling") +
#   xlab("Sample size") +
#   ylab(expression(paste("Pr(Type-3 | logically impossible)"))) +
#    scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) + theme(legend.position="none")  +
#   theme(axis.text=element_text(size=8),
#         axis.title=element_text(size=8),
#         axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#         axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)))
# p3 <- ggplot(df, aes(sample_size, con_type1)) +
#   geom_line(aes(color = event_types, linetype = noise_term), size=1) +
#   scale_x_continuous(breaks = seq(0, 50, 5)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.25)) +
#   labs(color = "Event set type") +
#   labs(linetype="Error in sampling") +
#   xlab("Sample size") +
#   ylab(expression(paste("Pr(Type-1 | logcailly impossible, not Type-3)"))) +
#    scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) + theme(legend.position="none") +
#   theme(axis.text=element_text(size=8),
#         axis.title=element_text(size=8),
#         axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#         axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)))
#
# g1 <- grid.arrange(p1, p2, p3,  ncol= 3, top = "Ties are not allowed")
# p4 <- ggplot(df2, aes(sample_size, mean_correct)) +
#   geom_line(aes(color = event_types, linetype = noise_term), size=1) +
#   scale_x_continuous(breaks = seq(0, 50, 5)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.25)) +
#   labs(color = "Event set type") +
#   labs(linetype="Error in sampling") +
#   xlab("Sample size") +
#   ylab(expression(paste("Pr(logically possible rankings)")))  +
#    scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) + theme(legend.position="none") +
#   theme(axis.text=element_text(size=8),
#         axis.title=element_text(size=8),
#         axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#         axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)))
# theme(axis.text=element_text(size=8),
#       axis.title=element_text(size=8),
#       axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#       axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)),
#       plot.margin = margin(t = 10, r = 10, b = 80, l = 10),
#       legend.position = "right") + xlim(1,50) + scale_fill_grey(start = 0.8, end = 0.2)
# p5 <- ggplot(df2, aes(sample_size, con_type1)) +
#   geom_line(aes(color = event_types, linetype = noise_term), size=1) +
#   scale_x_continuous(breaks = seq(0, 50, 5)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.25)) +
#   labs(color = "Event set type") +
#   labs(linetype="Error in sampling") +
#   xlab("Sample size") +
#   ylab(expression(paste("Pr(Type-1 | logcailly impossible)"))) +
#    scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) + theme(legend.position="none")  +
#   theme(axis.text=element_text(size=8),
#         axis.title=element_text(size=8),
#         axis.title.y  = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0)),
#         axis.title.x =  element_text(margin = margin(t = 5, r = 0, b = 0, l = 0)))
# legend <- get_legend(
#   p1 +
#     guides(color = guide_legend(nrow = 3)) +
#     theme(legend.position = "right")
# )
#
# g2 <- grid.arrange(p4, p5, legend, ncol= 3, top = "Ties are not allowed")
# plot_grid(g1, g2, nrow= 2)
#
# ggsave("figure1.pdf")
df1 <- df %>%
pivot_longer(cols = c(mean_correct, con_type1, con_type3),
names_to = "con_prob_type",
values_to = "prob_value") %>%
mutate(condition = "Ties allowed")
df3 <- df2 %>%
pivot_longer(cols = c(mean_correct, con_type1),
names_to = "con_prob_type",
values_to = "prob_value") %>%
mutate(condition = "Ties NOT allowed")
df1 <- df1 %>%
select(sample_size, noise_term, event_types, con_prob_type, prob_value, condition)
df3 <- df3 %>%
select(sample_size, noise_term, event_types, con_prob_type, prob_value, condition)
df1 <- rbind(df1, df3)
df1$con_prob_type[df1$con_prob_type == "con_type1"] <- "Type-1 ranking"
df1$con_prob_type[df1$con_prob_type == "con_type2"] <- "Type-2 ranking"
df1$con_prob_type[df1$con_prob_type == "con_type3"] <- "Type-3 ranking"
df1$con_prob_type[df1$con_prob_type == "mean_correct"] <- "Logically possible ranking"
df1$con_prob_type = factor(df1$con_prob_type, levels = c("Logically possible ranking", "Type-3 ranking", "Type-1 ranking", "Type-2 ranking"))
ggplot(df1, aes(sample_size, prob_value)) +
geom_line(aes(color = event_types, linetype = noise_term), size=1) +
scale_x_continuous(breaks = seq(0, 50, 10)) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
labs(color = "Event set type") +
labs(linetype="Error rate in sampling") +
xlab("Sample size") +
ylab(expression(paste("Predicted (conditional) probability")))  +
scale_linetype_manual(labels = c("d = 0", "d = 0.3"), values = c("solid", "dotted")) +
facet_wrap(condition ~con_prob_type, scales = "free_x")  +
theme(legend.position = c(0.85, 0.25),
legend.title=element_text(size=9))
ggsave("figure1.png")
ggsave("figure1.pdf")
## Download File
trackdown::download_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "/My drive/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd"")
## Download File
trackdown::download_file(file = "/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd")
1
## Download File
trackdown::download_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd")
drive_get("~/")
install.packages("googledrive")
install.packages("googledrive")
library(googledrive)
drive_get("~/")
## Download File
trackdown::download_file(file = "~/trackdown/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "~/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
## Download File
trackdown::download_file(file = "My Drive ~/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
drive_get("~/trackdown/preregistration_study2_ranking_task_three_sets.Rmd")
drive_get("~/trackdown/")
drive_get("~/trackdown/preregistration_study2_ranking_task_three_sets.rmd")
### /Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_1three_sets.Rmd
library(trackdown)
trackdown::update_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd", hide_code = TRUE)
### /Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_1three_sets.Rmd
library(trackdown)
trackdown::update_file(file = "/Users/xiaotongliu/Documents/Git_projects/ranking-project/study2_preregistration/preregistration_study2_ranking_task_three_sets.Rmd", hide_code = TRUE)
library(tidyverse)
library(afex)
library(emmeans)
library(runjags)
library(TreeBUGS)
library(tidybayes)
library(ggpubr)
library(lme4)
library(broom)
df <- read.csv("study_1_df.csv")
indiff_allow_indi <- df %>%
filter(between_subject_condition == "ties_allowed",
within_subject_condition == "indiff") %>%
pivot_wider(names_from = classify_all_ranks, values_from = f00) %>%
group_by(ID) %>%
select(ID, between_subject_condition, within_subject_condition,
logical, type_1, type_2, type_3) %>%
mutate(logical = ifelse(is.na(logical) == TRUE, 0, 1),
type_1 = ifelse(is.na(type_1) == TRUE, 0, 1),
type_2 = ifelse(is.na(type_2) == TRUE, 0, 1),
type_3 = ifelse(is.na(type_3) == TRUE, 0, 1)) %>%
group_by(ID) %>%
summarise(condition = "ties_allowed",
ML = sum(logical),
M1 = sum(type_1),
M2 = sum(type_2),
M3 = sum(type_3))
edge_allow_indi <- df %>%
filter(between_subject_condition == "ties_allowed",
within_subject_condition == "extreme") %>%
pivot_wider(names_from = classify_all_ranks, values_from = f00) %>%
group_by(ID) %>%
select(ID, between_subject_condition,  within_subject_condition,
logical, type_1, type_2, type_3) %>%
mutate(logical = ifelse(is.na(logical) == TRUE, 0, 1),
type_1 = ifelse(is.na(type_1) == TRUE, 0, 1),
type_2 = ifelse(is.na(type_2) == TRUE, 0, 1),
type_3 = ifelse(is.na(type_3) == TRUE, 0, 1)) %>%
group_by(ID) %>%
summarise(EL = sum(logical),
E1 = sum(type_1),
E2 = sum(type_2),
E3 = sum(type_3))
allow_indi <- cbind(indiff_allow_indi, edge_allow_indi %>% select(-ID))
indiff_not_allow_indi <- df %>% filter(between_subject_condition == "ties_not_allowed", within_subject_condition == "indiff") %>%
pivot_wider(names_from = classify_all_ranks, values_from = f00) %>%
group_by(ID) %>%
select(ID, between_subject_condition,  within_subject_condition,
logical, type_1, type_2) %>%
mutate(logical = ifelse(is.na(logical) == TRUE, 0, 1),
type_1 = ifelse(is.na(type_1) == TRUE, 0, 1),
type_2 = ifelse(is.na(type_2) == TRUE, 0, 1)) %>%
group_by(ID) %>%
summarise(condition = "ties_not_allowed",
ML = sum(logical),
M1 = sum(type_1),
M2 = sum(type_2)) %>% unique()
edge_not_allow_indi <- df %>%
filter(between_subject_condition == "ties_not_allowed",
within_subject_condition == "extreme") %>%
pivot_wider(names_from = classify_all_ranks, values_from = f00) %>%
group_by(ID) %>%
select(ID, between_subject_condition,  within_subject_condition,
logical, type_1, type_2) %>%
mutate(logical = ifelse(is.na(logical) == TRUE, 0, 1),
type_1 = ifelse(is.na(type_1) == TRUE, 0, 1),
type_2 = ifelse(is.na(type_2) == TRUE, 0, 1)) %>%
group_by(ID) %>%
summarise(EL = sum(logical),
E1 = sum(type_1),
E2 = sum(type_2)) %>% unique()
not_allow_indi <- cbind(indiff_not_allow_indi, edge_not_allow_indi %>% select(-ID))
write.csv(allow_indi, "allow_indi.csv", row.names = FALSE)
write.csv(not_allow_indi, "not_allow_indi.csv", row.names = FALSE)
head(allow_indi)
head(not_allow_indi)
